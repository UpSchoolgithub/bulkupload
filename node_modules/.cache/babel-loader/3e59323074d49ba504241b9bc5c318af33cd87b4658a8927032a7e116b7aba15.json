{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\bulk_upload\\\\src\\\\PdfQuestionExtractor.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfQuestionExtractor = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!file) {\n      alert(\"Please select a file first.\");\n      return;\n    }\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      const response = await axios.post(\"http://localhost:8000/upload-pdf/\", formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setQuestions(response.data.questions);\n    } catch (error) {\n      console.error(\"Error uploading file\", error);\n      alert(\"Failed to extract questions.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      maxWidth: '600px',\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"PDF Question Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"application/pdf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading,\n      children: loading ? 'Processing...' : 'Upload & Extract'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Extracted Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(questions, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(PdfQuestionExtractor, \"YwsZlSKtOksaxz5w85elXCeCyAk=\");\n_c = PdfQuestionExtractor;\nexport default PdfQuestionExtractor;\nvar _c;\n$RefreshReg$(_c, \"PdfQuestionExtractor\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PdfQuestionExtractor","_s","file","setFile","questions","setQuestions","loading","setLoading","handleFileChange","event","target","files","handleUpload","alert","formData","FormData","append","response","post","headers","data","error","console","style","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","onClick","disabled","length","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/hp/bulk_upload/src/PdfQuestionExtractor.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst PdfQuestionExtractor = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleFileChange = (event) => {\r\n        setFile(event.target.files[0]);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!file) {\r\n            alert(\"Please select a file first.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        try {\r\n            const response = await axios.post(\"http://localhost:8000/upload-pdf/\", formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n            setQuestions(response.data.questions);\r\n        } catch (error) {\r\n            console.error(\"Error uploading file\", error);\r\n            alert(\"Failed to extract questions.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: '20px', maxWidth: '600px', margin: 'auto' }}>\r\n            <h2>PDF Question Extractor</h2>\r\n            <input type=\"file\" onChange={handleFileChange} accept=\"application/pdf\" />\r\n            <button onClick={handleUpload} disabled={loading}>\r\n                {loading ? 'Processing...' : 'Upload & Extract'}\r\n            </button>\r\n            \r\n            {questions.length > 0 && (\r\n                <div>\r\n                    <h3>Extracted Questions</h3>\r\n                    <pre>{JSON.stringify(questions, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PdfQuestionExtractor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}